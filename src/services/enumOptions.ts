import type { EnvironmentalCase } from './environmentalAnalytics';

export interface EnumOptions {
  tiposActividad: string[];
  provincias: string[];
  localidades: string[];
  regiones: string[];
  areasTem√°ticas: string[];
  procuraduria: { value: string; label: string }[];
  estadosProceso: string[];
  estadosGenerales: string[];
  tiposVehiculo: string[];
  marcasVehiculo: string[];
  tiposIncautacion: string[];
  unidadesMedida: string[];
  nacionalidades: string[];
  provinciaMunicipio: string[];
}

export class EnumOptionsService {
  private static instance: EnumOptionsService;
  private options: EnumOptions | null = null;

  private constructor() {}

  static getInstance(): EnumOptionsService {
    if (!EnumOptionsService.instance) {
      EnumOptionsService.instance = new EnumOptionsService();
    }
    return EnumOptionsService.instance;
  }

  // Extraer opciones desde los datos reales
  async extractOptionsFromData(cases: EnvironmentalCase[]): Promise<EnumOptions> {
    // Tipos de actividad √∫nicos
    const tiposActividad = [...new Set(cases.map(c => c.tipoActividad).filter(t => t && t.trim() !== ''))].sort();
    
    // Provincias √∫nicas
    const provincias = [...new Set(cases.map(c => c.provincia).filter(p => p && p.trim() !== ''))].sort();
    
    // Localidades √∫nicas
    const localidades = [...new Set(cases.map(c => c.localidad).filter(l => l && l.trim() !== ''))].sort();
    
    // Regiones √∫nicas
    const regiones = [...new Set(cases.map(c => c.region).filter(r => r && r.trim() !== ''))].sort();
    
    // √Åreas tem√°ticas √∫nicas
    const areasTem√°ticas = [...new Set(cases.map(c => c.areaTem√°tica).filter(a => a && a.trim() !== ''))].sort();

    // Extraer nacionalidades de detenidos si existe la informaci√≥n
    const nacionalidades = new Set<string>();
    cases.forEach(c => {
      if (c.detenidosInfo) {
        c.detenidosInfo.forEach((detenido: any) => {
          if (detenido.nacionalidad && detenido.nacionalidad.trim() !== '') {
            nacionalidades.add(detenido.nacionalidad);
          }
        });
      }
    });

    // Extraer tipos y marcas de veh√≠culos si existe la informaci√≥n
    const tiposVehiculo = new Set<string>();
    const marcasVehiculo = new Set<string>();
    cases.forEach(c => {
      if (c.vehiculosInfo) {
        c.vehiculosInfo.forEach((vehiculo: any) => {
          if (vehiculo.tipo && vehiculo.tipo.trim() !== '') {
            tiposVehiculo.add(vehiculo.tipo);
          }
          if (vehiculo.marca && vehiculo.marca.trim() !== '') {
            marcasVehiculo.add(vehiculo.marca);
          }
        });
      }
    });

    // Extraer tipos de incautaci√≥n si existe la informaci√≥n
    const tiposIncautacion = new Set<string>();
    cases.forEach(c => {
      if (c.incautacionesInfo) {
        c.incautacionesInfo.forEach((incautacion: any) => {
          if (incautacion.tipo && incautacion.tipo.trim() !== '') {
            tiposIncautacion.add(incautacion.tipo);
          }
        });
      }
      // Tambi√©n desde el array de strings de incautaciones
      if (c.incautaciones) {
        c.incautaciones.forEach(inc => {
          const cleanType = inc.replace(/^CASO-\d{8}-\d{6}-\w+\s+/i, '')
                              .replace(/^\d+\s*/, '')
                              .replace(/\s+CASO\d+.*$/i, '')
                              .trim();
          if (cleanType) {
            tiposIncautacion.add(cleanType);
          }
        });
      }
    });

    // Obtener tipos y provincias/municipios √∫nicos desde la tabla vehiculos
    let tiposVehiculosDB: string[] = [];
    let provinciaMunicipiosDB: string[] = [];
    
    try {
      const { supabase } = await import('./supabase');
      console.log('üü¶ Conectando a Supabase para obtener opciones de veh√≠culos...');
      
      // Primero verificar si la tabla vehiculos existe y tiene datos
      const { data: allVehiculos, error: allError } = await supabase
        .from('vehiculos')
        .select('*')
        .limit(5);
      
      console.log('üü¶ Primeros 5 registros de vehiculos:', allVehiculos);
      console.log('üü¶ Error al consultar vehiculos:', allError);
      
      if (allError) {
        console.error('‚ùå Error accediendo a tabla vehiculos:', allError);
      } else if (!allVehiculos || allVehiculos.length === 0) {
        console.log('‚ö†Ô∏è La tabla vehiculos est√° vac√≠a');
      } else {
        console.log('‚úÖ Tabla vehiculos encontrada con', allVehiculos.length, 'registros (muestra)');
        console.log('üü¶ Estructura de primer registro:', Object.keys(allVehiculos[0] || {}));
        
        // Obtener tipos √∫nicos de veh√≠culos desde la base de datos
        const { data: tiposData, error: tiposError } = await supabase
          .from('vehiculos')
          .select('tipo');
        
        console.log('üü¶ Datos de tipos obtenidos:', tiposData);
        console.log('üü¶ Error de tipos:', tiposError);
        
        if (!tiposError && tiposData) {
          tiposVehiculosDB = [...new Set(tiposData
            .map(item => item.tipo)
            .filter(tipo => 
              tipo && 
              tipo !== null && 
              tipo !== undefined && 
              typeof tipo === 'string' &&
              tipo.trim() !== '' && 
              tipo.trim().toLowerCase() !== 'null'
            )
            .map(tipo => tipo.trim())
          )].sort();
          console.log('‚úÖ Tipos de veh√≠culos obtenidos de BD:', tiposVehiculosDB);
          console.log('üü¶ Total de tipos √∫nicos encontrados:', tiposVehiculosDB.length);
        } else {
          console.error('‚ùå Error obteniendo tipos de veh√≠culos:', tiposError);
        }
        
        // Obtener provinciaMunicipio √∫nicos desde la base de datos
        const { data: provinciasData, error: provinciasError } = await supabase
          .from('vehiculos')
          .select('provinciamunicipio');
        
        console.log('üü¶ Datos de provincias obtenidos:', provinciasData);
        console.log('üü¶ Error de provincias:', provinciasError);
        
        if (!provinciasError && provinciasData) {
          provinciaMunicipiosDB = [...new Set(provinciasData
            .map(item => item.provinciamunicipio)
            .filter(provincia => 
              provincia && 
              provincia !== null && 
              provincia !== undefined && 
              typeof provincia === 'string' &&
              provincia.trim() !== '' && 
              provincia.trim().toLowerCase() !== 'null'
            )
            .map(provincia => provincia.trim())
          )].sort();
          console.log('‚úÖ Provincias/Municipios obtenidos de BD:', provinciaMunicipiosDB);
          console.log('üü¶ Total de provincias √∫nicas encontradas:', provinciaMunicipiosDB.length);
        } else {
          console.error('‚ùå Error obteniendo provincias/municipios:', provinciasError);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error conectando con la base de datos para obtener opciones:', error);
    }

    this.options = {
      tiposActividad,
      provincias,
      localidades,
      regiones,
      areasTem√°ticas,
      procuraduria: [
        { value: 'SI', label: 'S√≠' },
        { value: 'NO', label: 'No' }
      ],
      estadosProceso: [
        'En proceso',
        'Completado',
        'Archivado',
        'Pendiente',
        'En investigaci√≥n',
        'Cerrado'
      ],
      estadosGenerales: [
        'Activo',
        'Retenido',
        'Incautado',
        'Liberado',
        'En custodia',
        'Devuelto'
      ],
      tiposVehiculo: tiposVehiculosDB.length > 0 ? 
        tiposVehiculosDB : 
        ['Autom√≥vil', 'Motocicleta', 'Cami√≥n', 'Camioneta', 'Autob√∫s', 'Otros'],
      marcasVehiculo: Array.from(marcasVehiculo).length > 0 ? 
        Array.from(marcasVehiculo).sort() : 
        ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Nissan', 'Hyundai', 'Otros'],
      tiposIncautacion: Array.from(tiposIncautacion).length > 0 ? 
        Array.from(tiposIncautacion).sort() : 
        ['Drogas', 'Armas', 'Dinero', 'Documentos', 'Materiales', 'Otros'],
      unidadesMedida: [
        'unidad',
        'gramos',
        'kilogramos',
        'litros',
        'metros',
        'piezas',
        'cajas',
        'bolsas'
      ],
      nacionalidades: Array.from(nacionalidades).length > 0 ? 
        Array.from(nacionalidades).sort() : 
        ['Dominicana', 'Haitiana', 'Estadounidense', 'Venezolana', 'Colombiana', 'Otras'],
      provinciaMunicipio: provinciaMunicipiosDB.length > 0 ? 
        provinciaMunicipiosDB : 
        [
          'Azua',
          'Bahoruco',
          'Barahona',
          'Dajab√≥n',
          'Distrito Nacional',
          'Duarte',
          'El√≠as Pi√±a',
          'El Seibo',
          'Espaillat',
          'Hato Mayor',
          'Hermanas Mirabal',
          'Independencia',
          'La Altagracia',
          'La Romana',
          'La Vega',
          'Mar√≠a Trinidad S√°nchez',
          'Monse√±or Nouel',
          'Monte Cristi',
          'Monte Plata',
          'Pedernales',
          'Peravia',
          'Puerto Plata',
          'Saman√°',
          'San Crist√≥bal',
          'San Jos√© de Ocoa',
          'San Juan',
          'San Pedro de Macor√≠s',
          'S√°nchez Ram√≠rez',
          'Santiago',
          'Santiago Rodr√≠guez',
          'Santo Domingo',
          'Valverde'
        ]
    };

    return this.options;
  }

  // Obtener opciones (usar cach√© si est√° disponible)
  getOptions(): EnumOptions {
    if (!this.options) {
      // Opciones por defecto si no se han cargado datos
      return {
        tiposActividad: ['Operativo', 'Patrulla', 'Inspecci√≥n', 'Investigaci√≥n'],
        provincias: ['Santo Domingo', 'Santiago', 'La Vega', 'San Crist√≥bal', 'Otras'],
        localidades: [],
        regiones: ['Regi√≥n I', 'Regi√≥n II', 'Regi√≥n III', 'Regi√≥n IV', 'Regi√≥n V'],
        areasTem√°ticas: ['Suelos y Aguas', 'Recursos Forestales', 'Areas Protegida', 'Gesti√≥n Ambiental', 'Costeros y Marinos'],
        procuraduria: [
          { value: 'SI', label: 'S√≠' },
          { value: 'NO', label: 'No' }
        ],
        estadosProceso: ['En proceso', 'Completado', 'Archivado', 'Pendiente'],
        estadosGenerales: ['Activo', 'Retenido', 'Incautado', 'Liberado'],
        tiposVehiculo: ['Autom√≥vil', 'Motocicleta', 'Cami√≥n', 'Camioneta'],
        marcasVehiculo: ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Nissan'],
        tiposIncautacion: ['Drogas', 'Armas', 'Dinero', 'Documentos', 'Materiales'],
        unidadesMedida: ['unidad', 'gramos', 'kilogramos', 'litros', 'piezas'],
        nacionalidades: ['Dominicana', 'Haitiana', 'Estadounidense', 'Venezolana'],
        provinciaMunicipio: [
          'Azua',
          'Bahoruco', 
          'Barahona',
          'Dajab√≥n',
          'Distrito Nacional',
          'Duarte',
          'El√≠as Pi√±a',
          'El Seibo',
          'Espaillat',
          'Hato Mayor',
          'Hermanas Mirabal',
          'Independencia',
          'La Altagracia',
          'La Romana',
          'La Vega',
          'Mar√≠a Trinidad S√°nchez',
          'Monse√±or Nouel',
          'Monte Cristi',
          'Monte Plata',
          'Pedernales',
          'Peravia',
          'Puerto Plata',
          'Saman√°',
          'San Crist√≥bal',
          'San Jos√© de Ocoa',
          'San Juan',
          'San Pedro de Macor√≠s',
          'S√°nchez Ram√≠rez',
          'Santiago',
          'Santiago Rodr√≠guez',
          'Santo Domingo',
          'Valverde'
        ]
      };
    }
    return this.options;
  }

  // Actualizar opciones con nuevos datos
  async updateOptions(cases: EnvironmentalCase[]): Promise<void> {
    await this.extractOptionsFromData(cases);
  }

  // Obtener opciones para un campo espec√≠fico
  getFieldOptions(fieldName: string): string[] | { value: any; label: string }[] {
    const options = this.getOptions();
    
    switch (fieldName) {
      case 'tipoActividad':
        return options.tiposActividad;
      case 'provincia':
        return options.provincias;
      case 'localidad':
        return options.localidades;
      case 'region':
        return options.regiones;
      case 'areaTem√°tica':
        return options.areasTem√°ticas;
      case 'procuraduria':
        return options.procuraduria;
      case 'estadoProceso':
        return options.estadosProceso;
      case 'estado':
        return options.estadosGenerales;
      case 'tipoVehiculo':
        return options.tiposVehiculo;
      case 'marca':
        return options.marcasVehiculo;
      case 'tipoIncautacion':
        return options.tiposIncautacion;
      case 'unidadMedida':
        return options.unidadesMedida;
      case 'nacionalidad':
        return options.nacionalidades;
      case 'provinciaMunicipio':
        return options.provinciaMunicipio;
      default:
        return [];
    }
  }

  // Verificar si un campo debe ser dropdown
  isDropdownField(fieldName: string): boolean {
    const dropdownFields = [
      'tipoActividad',
      'provincia', 
      'localidad',
      'region',
      'areaTem√°tica',
      'procuraduria',
      'estadoProceso',
      'estado',
      'marca',
      'tipoIncautacion',
      'unidadMedida',
      'nacionalidad',
      'provinciaMunicipio'
    ];
    return dropdownFields.includes(fieldName);
  }
}

// Exportar instancia singleton
export const enumOptionsService = EnumOptionsService.getInstance();